rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {

      match /posts/{postId} {
        // listing posts is forbidden
        // must have been given access to the edit id to get this far
        allow read;
        allow get;
        // allow get: if true; 
        // creating is only permitted for authenticated users 
        allow create: if request.auth != null;
        // updating is only permitted for authenticated users 
        allow update: if request.auth != null;
        // reading annotations is allowed if you've got the edit id
        match /annotations/{annotationId} {
          allow read;
        }
        match /annotations/{annotationId} {
          allow create, update, delete: if request.auth != null;
        }
        match /items/{itemId} {
          allow create, read, update, delete: if request.auth != null;
        }
      }
      
      match /users/{userId} {
      	allow read;
        allow create: if isValidUser(userId);
      }
      
      match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
      }
      
      match /users/{userId}/posts/{postId} {
      	allow read;
        allow create: if canCreatePost(userId); 
        allow update: if canUpdatePost(userId);
        allow delete: if request.auth.uid == userId;
      }

      // Users

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        let usernameExists = existsAfter(/databases/$(database)/documents/usernames/$(username));

        return isOwner && usernameExists;        
      }
      
      function isValidUsername(username) {
		    let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 1 && username.size() <= 64;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        
        return isOwner && isValidLength && isValidUserDoc;     
      }

      // Posts
      
      function canCreatePost(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.createdAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = username == request.resource.data.username;

      	return isOwner && isNow && isValidContent && usernameMatches;
      }
      
      function canUpdatePost(userId) {
        let isOwner = request.auth.uid == userId;
      	let isNow = request.time == request.resource.data.updatedAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username']);
        
        return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
      }
    }
  }
}