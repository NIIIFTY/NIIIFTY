rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      
      match /users/{userId} {
      	allow read;
        allow create: if isValidUser(userId);
      }
      
      match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
      }
      
      match /files/{fileId} {
      	allow read;
        allow create;
        allow update;
        allow delete;
        // allow create: if canCreateFile(userId); 
        // allow update: if canUpdateFile(userId);
        // allow delete: if request.auth.uid == userId;
      }

      // Users

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        let usernameExists = existsAfter(/databases/$(database)/documents/usernames/$(username));

        return isOwner && usernameExists;        
      }
      
      function isValidUsername(username) {
		    let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 1 && username.size() <= 64;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        
        return isOwner && isValidLength && isValidUserDoc;     
      }

      // Files
      
      function canCreateFile(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.createdAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = username == request.resource.data.username;

      	return isOwner && isNow && isValidContent && usernameMatches;
      }
      
      function canUpdateFile(userId) {
        let isOwner = request.auth.uid == userId;
      	let isNow = request.time == request.resource.data.updatedAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username']);
        
        return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
      }
    }
  }
}